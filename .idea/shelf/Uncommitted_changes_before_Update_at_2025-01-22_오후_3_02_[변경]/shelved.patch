Index: RAGE _ BLOOD FRONTEER/Beta 1.0/1950MapEditor_Ver2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\n\r\nimport codes.MAP_Ver2 as GameMap\r\nimport codes.KeyEventTkinterToPygame as KeyTk2Pygame\r\nimport tkinter as tk\r\nfrom tkinter import ttk\r\nimport pygame\r\nimport json\r\n\r\nDEBUG = False\r\npygame.init()  # pygame 모듈 초기화\r\n\r\n\r\ndef center_window(window):\r\n    window.update_idletasks()  # 창의 크기 계산\r\n    width = window.winfo_width()\r\n    height = window.winfo_height()\r\n    screen_width = window.winfo_screenwidth()\r\n    screen_height = window.winfo_screenheight()\r\n\r\n    # 중앙 좌표로 창 위치 설정\r\n    position_top = int(screen_height / 2 - height / 2)\r\n    position_left = int(screen_width / 2 - width / 2)\r\n    window.geometry(f'{width}x{height}+{position_left}+{position_top}')\r\n\r\n\r\nclass Main:\r\n    def __init__(self):\r\n        # Tkinter 초기화\r\n        self.root = tk.Tk()\r\n        self.root.title(\"1950 Map Editor\")  # 창 제목 설정\r\n        self.root.geometry(\"880x660\")  # Tkinter 창 크기 설정\r\n        self.root.resizable(False, False)  # 창 크기 조절 불가능 설정\r\n\r\n        # Tkinter에서 Pygame을 포함할 프레임 생성\r\n        pygame_frame = tk.Frame(self.root, width=880, height=660, bg=\"black\")  # Pygame이 렌더링될 영역\r\n        pygame_frame.pack()\r\n\r\n        # Pygame 창을 Tkinter 프레임에 임베딩\r\n        os.environ['SDL_WINDOWID'] = str(pygame_frame.winfo_id())  # SDL 창 ID 설정\r\n        os.environ['SDL_VIDEODRIVER'] = 'windib'  # Windows에서 제대로 동작하도록 드라이버 설정\r\n        self.root.update()  # 창을 업데이트하여 ID가 반영되도록 함\r\n\r\n        # Tkinter 창 닫기 이벤트 처리\r\n        self.root.protocol(\"WM_DELETE_WINDOW\", self.stop_running)\r\n\r\n        # 초기화\r\n        pygame.init()\r\n        pygame.mixer.init()\r\n        self.select_SE = pygame.mixer.Sound(r'data/sound/effect/A Piano.wav')\r\n        self.collect_SE = pygame.mixer.Sound(r'data/sound/effect/Connect.wav')\r\n\r\n        if DEBUG:\r\n            print(\"성공적으로 Main 클래스가 로드되었습니다\")\r\n        # screen, preview(메인 스크린 배경), [preview1, preview2] (서브 스크린 배경 (ui?)) clock 초기화\r\n        self.screen = pygame.display.set_mode((880, 660))  # 640, 480의 1.375배\r\n        self.preview = pygame.rect.Rect(0, 0, 640, 480)\r\n        self.preview1 = pygame.rect.Rect(0, 480, 640, 180)\r\n        self.preview2 = pygame.rect.Rect(640, 0, 240, 660)\r\n        self.clock = pygame.time.Clock()\r\n\r\n        # tile_size, map_max 초기화 (아마도 타일 하나당 width, height 크기랑, 한 맵에 있는 타일의 개수 말하는 듯)\r\n        self.tile_size = 60\r\n        self.map_max = 30\r\n\r\n        self.Map_c = GameMap.Map(self.screen, pygame_in_game=pygame)\r\n        self.file_index = 1\r\n        self.select_IRID = 0\r\n        self.mouserect = 0\r\n        self.select_tileType = 1\r\n        self.map_load_onoff = 0\r\n        self.is_wall = 1\r\n        # 현재 map list 생성\r\n        self.now_map = self.Map_c.get_all_map()\r\n        self.text = lambda size, text, color, x, y: self.screen.blit(\r\n            pygame.font.Font(r\"data/font/DungGeunMo.otf\", size).render(text, 1, color), (x, y))\r\n        self.pos_x, self.pos_y = 0, 0\r\n\r\n        self.tile_name_list = list(self.Map_c.assets.keys())\r\n        self.tile_name_list.insert(0, \"삭제 모드\")\r\n        if DEBUG:\r\n            print(self.tile_name_list)\r\n        self.running = True\r\n\r\n        KeyTk2Pygame.add_key_event_from_tk_to_pygame(self.root, pygame)\r\n\r\n        # 메뉴바 생성\r\n        menubar = tk.Menu(self.root)\r\n\r\n        def donothing():\r\n            filewin = tk.Toplevel(self.root)\r\n            button = tk.Button(filewin, text=\"Do nothing button\")\r\n            button.pack()\r\n\r\n        def new():\r\n            new_win = tk.Toplevel(self.root)\r\n            new_win.title(\"New\")\r\n\r\n            new_win.columnconfigure(0, weight=1)\r\n            new_win.columnconfigure(1, weight=1)\r\n            new_win.columnconfigure(2, weight=1)\r\n\r\n            # 1. 첫 번째 행: 레이블\r\n            label = tk.Label(new_win, text=\"생성할 맵 이름을 적어주세요.\")\r\n            label.grid(row=0, column=0, columnspan=3, pady=10)\r\n\r\n            # 2. 두 번째 행: room 레이블, 입력 필드, .json 레이블\r\n            label_room = tk.Label(new_win, text=\"room\")\r\n            label_room.grid(row=1, column=0, sticky=\"e\", padx=(5, 0))\r\n\r\n            entry_num = tk.Entry(new_win)\r\n            entry_num.grid(row=1, column=1)\r\n\r\n            label_json = tk.Label(new_win, text=\".json\")\r\n            label_json.grid(row=1, column=2, sticky=\"w\", padx=(0, 5))\r\n\r\n            # 3. 세 번째 행: 확인 버튼\r\n            button_get_input = tk.Button(\r\n                new_win,\r\n                text=\"확인\",\r\n                width=10,\r\n                command=lambda: new1(f\"room{entry_num.get()}.json\", new_win),\r\n            )\r\n            button_get_input.grid(row=2, column=0, columnspan=3, pady=10)\r\n\r\n        def new1(file_name, last_window):\r\n            last_window.destroy()\r\n            new_win = tk.Toplevel(self.root)\r\n            new_win.title(\"New\")\r\n\r\n            # 창의 모든 열을 균등하게 확장 가능하도록 설정\r\n            new_win.columnconfigure(0, weight=1)\r\n            new_win.columnconfigure(1, weight=1)\r\n            new_win.columnconfigure(2, weight=1)\r\n            new_win.columnconfigure(3, weight=1)\r\n\r\n            label = tk.Label(new_win, text=\"생성할 맵 사이즈를 적어주세요.\")\r\n            label.grid(row=0, column=0, columnspan=2, pady=10)\r\n            # 'room' 레이블\r\n            label_width = tk.Label(new_win, text=\"width:\")\r\n            label_width.grid(row=1, column=0)\r\n\r\n            # 입력 필드\r\n            entry_size_w = tk.Entry(new_win)\r\n            entry_size_w.grid(row=1, column=1)\r\n\r\n            # 'room' 레이블\r\n            label_height = tk.Label(new_win, text=\"height:\")\r\n            label_height.grid(row=2, column=0)\r\n\r\n            # 입력 필드\r\n            entry_size_h = tk.Entry(new_win)\r\n            entry_size_h.grid(row=2, column=1)\r\n\r\n            button_get_input = tk.Button(\r\n                new_win,\r\n                text=\"확인\",\r\n                width=10,\r\n                command=lambda:\r\n                self.make_new_map(file_name, [int(entry_size_w.get()), int(entry_size_h.get())], new_win)\r\n            )\r\n            button_get_input.grid(row=3, column=0, columnspan=2, pady=10)\r\n\r\n        def open():\r\n            open_win = tk.Toplevel(self.root)\r\n            open_win.title(\"열 맵을 선택해주세요.\")\r\n            listbox = tk.Listbox(open_win, height=0, selectmode=\"extended\")\r\n            for map in self.Map_c.get_map_list():\r\n                listbox.insert(tk.END, map)\r\n            listbox.pack()\r\n\r\n            # 버튼 추가 (선택된 항목 반환)\r\n            button = tk.Button(open_win, text=\"선택하기\", command=lambda: self.map_load_in_listbox(listbox, open_win))\r\n            button.pack()\r\n\r\n            # Toplevel 창을 중앙에 배치하는 함수\r\n            center_window(open_win)\r\n\r\n        def save():\r\n            self.save(f\"room{self.file_index}.json\")\r\n\r\n        def save_as():\r\n            new_win = tk.Toplevel(self.root)\r\n            new_win.title(\"Save As...\")\r\n\r\n            new_win.columnconfigure(0, weight=1)\r\n            new_win.columnconfigure(1, weight=1)\r\n            new_win.columnconfigure(2, weight=1)\r\n\r\n            # 1. 첫 번째 행: 레이블\r\n            label = tk.Label(new_win, text=\"저장할 맵 이름을 적어주세요.\")\r\n            label.grid(row=0, column=0, columnspan=3, pady=10)\r\n\r\n            # 2. 두 번째 행: room 레이블, 입력 필드, .json 레이블\r\n            label_room = tk.Label(new_win, text=\"room\")\r\n            label_room.grid(row=1, column=0, sticky=\"e\", padx=(5, 0))\r\n\r\n            entry_num = tk.Entry(new_win)\r\n            entry_num.grid(row=1, column=1)\r\n\r\n            label_json = tk.Label(new_win, text=\".json\")\r\n            label_json.grid(row=1, column=2, sticky=\"w\", padx=(0, 5))\r\n\r\n            # 3. 세 번째 행: 확인 버튼\r\n            button_get_input = tk.Button(\r\n                new_win,\r\n                text=\"확인\",\r\n                width=10,\r\n                command=lambda:\r\n                self.save_as_map(f\"room{entry_num.get()}.json\", self.Map_c.mapGet(self.file_index), new_win),\r\n            )\r\n            button_get_input.grid(row=2, column=0, columnspan=3, pady=10)\r\n\r\n        # 파일 메뉴 생성 및 추가\r\n        filemenu = tk.Menu(menubar, tearoff=0)\r\n        filemenu.add_command(label=\"New\", command=new)\r\n        filemenu.add_command(label=\"Open\", command=open)\r\n        filemenu.add_command(label=\"Save\", command=save)\r\n        filemenu.add_command(label=\"Save as...\", command=save_as)\r\n        filemenu.add_separator()\r\n        filemenu.add_command(label=\"Exit\", command=self.root.quit)\r\n        menubar.add_cascade(label=\"File\", menu=filemenu)\r\n\r\n        # 메뉴바를 Tkinter 창에 설정\r\n        self.root.config(menu=menubar)\r\n\r\n    def draw_preview(self):\r\n        \"\"\"\r\n        메인 화면 배경 그리는 함수\r\n        \"\"\"\r\n        pygame.draw.rect(self.screen, (0, 0, 0), self.preview)\r\n\r\n    def draw_hider(self):\r\n        \"\"\"\r\n        화면 ui 배경 그리는 함수\r\n        \"\"\"\r\n        pygame.draw.rect(self.screen, (0, 0, 70), self.preview1)\r\n        pygame.draw.rect(self.screen, (0, 0, 70), self.preview2)\r\n\r\n    def lines(self):\r\n        \"\"\"\r\n        메인 배경 격자 그리는 함수\r\n        \"\"\"\r\n        for k in range(0, self.Map_c.get_size()[0] * self.tile_size + 1, self.tile_size):  # 가로선\r\n            x, y = self.Map_c.moveposGet()\r\n            pygame.draw.line(self.screen, (255, 255, 255), start_pos=(x, k + y),\r\n                             end_pos=(x + self.Map_c.get_size()[0] * self.tile_size, k + y))\r\n\r\n        for k in range(0, self.Map_c.get_size()[1] * self.tile_size + 1, self.tile_size):  # 가로선\r\n            x, y = self.Map_c.moveposGet()\r\n            pygame.draw.line(self.screen, (255, 255, 255), start_pos=(k + x, y),\r\n                             end_pos=(k + x, self.Map_c.get_size()[1] * self.tile_size + y))\r\n\r\n    def event(self):\r\n        \"\"\"\r\n        이벤트 다루는 함수\r\n        \"\"\"\r\n        # 마우스 pos 가져오기\r\n        x, y = pygame.mouse.get_pos()\r\n        # 마우스를 기준으로 해서 10x10 사각형 만들기\r\n        # 좌측 상단보다 중앙이 나을 것 같아서 조금 바꿈\r\n        self.mouserect = pygame.rect.Rect(x - 5, y - 5, 10, 10)\r\n        # 마우스 렉트 그리기\r\n        pygame.draw.rect(self.screen, (255, 255, 255), self.mouserect)  # 마우스에 Rect개체 덮어 씨우기\r\n\r\n        x, y = self.Map_c.moveposGet()  # 맵의 이동 좌표 얻기\r\n        x1, y1 = pygame.mouse.get_pos()  # 마우스 좌표얻기\r\n        self.pos_x, self.pos_y = (x * -1 + x1) // self.tile_size, (\r\n                y * -1 + y1) // self.tile_size  # 그걸 Tile size로 나누어 커서가 위치한 pos 계산\r\n\r\n        # print(self.now_map[self.file_index - 1][\"tilemap\"][f\"{self.pos_x};{self.pos_y}\"])\r\n        # print(self.pos_x, self.pos_y)  # 그 pos 출력\r\n        # 지금 당장 savefile 저장\r\n        # noinspection PyTypeChecker\r\n        # 위 주석은 무시하셈.\r\n\r\n        # 단축기\r\n        pressed_keys = pygame.key.get_pressed()\r\n\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                self.stop_running()\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_i:\r\n                    self.select_IRID += 1\r\n                    self.select_SE.play()\r\n                if event.key == pygame.K_k and not self.select_IRID == 0:\r\n                    self.select_IRID -= 1\r\n                    self.select_SE.play()\r\n                if event.key == pygame.K_f and not self.select_tileType == 0:\r\n                    if DEBUG:\r\n                        print(\"POPIPOPIPO\")\r\n                    self.select_tileType -= 1\r\n                    self.select_SE.play()\r\n                if event.key == pygame.K_r and len(self.tile_name_list) != self.select_tileType + 1:\r\n                    self.select_tileType += 1\r\n                    self.select_SE.play()\r\n\r\n                if event.key == pygame.K_l:\r\n                    self.select_SE.play()\r\n                    self.is_wall = not self.is_wall\r\n\r\n                if pressed_keys[pygame.K_RCTRL] or pressed_keys[pygame.K_LCTRL]:\r\n                    if event.key == pygame.K_s:\r\n                        self.save(f\"room{self.file_index}.json\")\r\n\r\n            if (event.type == pygame.MOUSEBUTTONDOWN and\r\n                    event.button == 3 and\r\n                    self.pos_x >= 0 and self.pos_y >= 0 and\r\n                    self.pos_x < self.Map_c.get_size()[0] and\r\n                    self.pos_y < self.Map_c.get_size()[1]):\r\n                # 메인 ui에 마우스가 있는 경우\r\n                if self.mouserect.colliderect(self.preview):\r\n                    OptionTopLevel(self.root, self.pos_x + 1, self.pos_y + 1, self.Map_c,\r\n                                   self.now_map, self.file_index)\r\n            # print(\"WALL or FLOOR : {}\".format(self.is_wall))\r\n\r\n        # 마우스 클릭 감지 및, 맵 에디터 설정\r\n        if (pygame.mouse.get_pressed()[0] and\r\n                self.pos_x >= 0 and self.pos_y >= 0 and\r\n                self.pos_x < self.Map_c.get_size()[0] and\r\n                self.pos_y < self.Map_c.get_size()[1]):  # 마우스 좌클릭 감지\r\n            # 메인 ui에 마우스가 있는 경우\r\n            if self.mouserect.colliderect(self.preview):\r\n                try:\r\n                    # select_tileType가 0(Delete)가 아닌 경우\r\n                    if self.select_tileType != 0:\r\n                        if DEBUG:\r\n                            print([\"floor\", \"wall\"][self.is_wall])\r\n                        # file_index번 맵에서 tilemap을 가져와 pos_x와 pos_y에 있는 타일의 이미지를\r\n                        # tile_name_list[select_tileType]로 설정하고\r\n                        # type를 floor, wall중에 선택되어있는걸로 설정한다.\r\n                        if not self.now_map[f\"room{self.file_index}.json\"][\"tilemap\"].get(\r\n                                f\"{self.pos_x + 1};{self.pos_y + 1}\"):\r\n                            self.now_map[f\"room{self.file_index}.json\"][\"tilemap\"][\r\n                                f\"{self.pos_x + 1};{self.pos_y + 1}\"] = {\r\n                                \"event\": 0,\r\n                                \"img\": \"\",\r\n                                \"pos\": [\r\n                                    0,\r\n                                    0\r\n                                ],\r\n                                \"type\": \"\"\r\n                            }\r\n                        self.now_map[f\"room{self.file_index}.json\"][\"tilemap\"][f\"{self.pos_x + 1};{self.pos_y + 1}\"][\r\n                            \"img\"] = self.tile_name_list[self.select_tileType]\r\n                        self.now_map[f\"room{self.file_index}.json\"][\"tilemap\"][f\"{self.pos_x + 1};{self.pos_y + 1}\"][\r\n                            \"pos\"] = [self.pos_x + 1, self.pos_y + 1]\r\n                        self.now_map[f\"room{self.file_index}.json\"][\"tilemap\"][f\"{self.pos_x + 1};{self.pos_y + 1}\"][\r\n                            \"type\"] = [\"floor\", \"wall\"][self.is_wall]\r\n                    # 아니면\r\n                    else:\r\n                        if DEBUG:\r\n                            print('Delete')\r\n                        # 지워버린다.\r\n                        del self.now_map[f\"room{self.file_index}.json\"][\"tilemap\"][f\"{self.pos_x + 1};{self.pos_y + 1}\"]\r\n                    # 이걸로 다시 맵 로딩을 한다.\r\n                    self.Map_c.load_to_list(self.now_map[f\"room{self.file_index}.json\"])\r\n                except KeyError:\r\n                    if DEBUG:\r\n                        print(\"None\")\r\n\r\n    def nowMapGet(self):\r\n        \"\"\"\r\n        현재 맵을 반환합니다.\r\n        (아직 안씀)\r\n        :return: self.now_map\r\n        \"\"\"\r\n        return self.now_map\r\n\r\n    def save(self, file_name):\r\n        \"\"\"\r\n        맵을 파일로 저장합니다.\r\n        \"\"\"\r\n        print(\"SAVING...\")\r\n        a = str(json.dumps(self.now_map[file_name], indent=4, sort_keys=True))\r\n        # print(a)\r\n        with open(f\"data\\\\map_Ver2\\\\{file_name}\", \"w\") as file:\r\n            if DEBUG:\r\n                print(self.now_map[file_name])\r\n            file.write(a)\r\n            if DEBUG:\r\n                print(\"GAY\")\r\n\r\n    def save_all(self):\r\n        \"\"\"\r\n        맵을 파일로 저장합니다.\r\n        \"\"\"\r\n        print(\"SAVING...\")\r\n        for file_name in self.Map_c.get_map_list():\r\n            if DEBUG: print(file_name)\r\n            a = str(json.dumps(self.now_map[file_name], indent=4, sort_keys=True))\r\n            # print(a)\r\n            with open(f\"data\\\\map_Ver2\\\\{file_name}\", \"w\") as file:\r\n                if DEBUG:\r\n                    print(self.now_map[file_name])\r\n                file.write(a)\r\n                if DEBUG:\r\n                    print(\"GAY\")\r\n\r\n    def run(self):\r\n        self.Map_c.load_to_list(self.Map_c.mapGet(1))\r\n        self.Map_c.draw_set()\r\n        while self.running:\r\n            pygame.event.pump()\r\n\r\n            self.screen.fill((0, 0, 0))\r\n            a = \"존재하지 않는 IRID\"\r\n\r\n            self.draw_preview()\r\n\r\n            self.Map_c.draw()\r\n            self.Map_c.event()\r\n\r\n            self.lines()\r\n            self.draw_hider()\r\n            self.event()\r\n            self.text(30, \"현재 맵 파일 번호: %d\" % int(self.file_index), (255, 255, 255), 500, 600)\r\n            self.text(30, a, (255, 255, 255), 600, 550)\r\n            self.text(30, \"현재 IRID: %d\" % self.select_IRID, (255, 255, 255), 600, 500)\r\n            self.text(30, \"현재 좌표: %d;%d\" % (self.pos_x + 1, self.pos_y + 1), (255, 255, 255), 300, 500)\r\n            try:\r\n                self.text(30,\r\n                          \"현재 타일:\" +\r\n                          self.now_map[f\"room{self.file_index}.json\"][\"tilemap\"][f\"{self.pos_x + 1};{self.pos_y + 1}\"][\r\n                              \"img\"], (255, 255, 255), 300, 550)\r\n            except KeyError:\r\n                self.text(30, \"현재 타일: 없음\", (255, 255, 255), 300, 550)\r\n            self.text(30, f\"현재 선택 타일\", (255, 255, 255), 650, 0)\r\n            self.text(30, f\"벽 여부: {bool(self.is_wall)}\", (255, 255, 255), 650, 100)\r\n\r\n            try:\r\n                self.text(19,\r\n                          f\"현재 타일 벽 여부: {self.now_map[f\"room{self.file_index}.json\"][\"tilemap\"][f\"{self.pos_x + 1};{self.pos_y + 1}\"][\"type\"]}\",\r\n                          (255, 255, 255), 650, 150)\r\n            except KeyError:\r\n                self.text(19, f\"현재 타일 벽 여부: None\", (255, 255, 255), 650, 150)\r\n            self.text(20, f\"{self.tile_name_list[self.select_tileType]}\", (255, 255, 255), 700, 80)\r\n            # 미리보기 드로우\r\n            if self.select_tileType != 0:\r\n                self.screen.blit(\r\n                    pygame.transform.scale(self.Map_c.assets[self.tile_name_list[self.select_tileType]], (40, 40)),\r\n                    (750, 40))\r\n            pygame.display.update()\r\n\r\n            self.clock.tick(60)\r\n\r\n            # Tkinter 이벤트 처리 (화면 업데이트 및 이벤트 처리)\r\n            self.root.update_idletasks()\r\n            self.root.update()\r\n\r\n    # print(self.now_map[f\"room{self.file_index}.json\"])\r\n    # print(json.dumps(self.now_map[f\"room{self.file_index}.json\"], indent=4, separators=(\"{\", \"=\"), sort_keys=True))\r\n\r\n    def make_new_map(self, file_name, size=None, window=None):\r\n        if size is None:\r\n            size = [20, 20]\r\n        map_dir = \"data/map_Ver2/\"\r\n        with open(map_dir + file_name, \"w+\", encoding=\"utf8\") as file:\r\n            file.write(json.dumps({\"size\": size, \"startpos\": [0, 0], \"tilemap\": {}}, indent=4, sort_keys=True))\r\n        self.Map_c.reload_file()\r\n        self.now_map = self.Map_c.get_all_map()\r\n        self.map_load_with_file_name(file_name)\r\n        window.destroy()\r\n\r\n    def save_as_map(self, file_name, map, window=None):\r\n        map_dir = \"data/map_Ver2/\"\r\n        with open(map_dir + file_name, \"w+\", encoding=\"utf8\") as file:\r\n            file.write(json.dumps(map, indent=4, sort_keys=True))\r\n        self.Map_c.reload_file()\r\n        self.now_map = self.Map_c.get_all_map()\r\n        self.map_load_with_file_name(file_name)\r\n        window.destroy()\r\n\r\n    def stop_running(self):\r\n        self.running = False  # 플래그를 False로 설정하여 루프 종료\r\n        self.root.quit()  # Tkinter 루프 종료\r\n\r\n    def map_load_in_listbox(self, listbox, window):\r\n        # 선택된 항목의 인덱스를 얻음\r\n        selected_indices = listbox.curselection()\r\n\r\n        # 선택된 항목이 있을 경우 반환\r\n        if selected_indices:\r\n            selected_item = listbox.get(selected_indices[0])\r\n            print(f\"선택된 항목: {selected_item}\")\r\n            window.destroy()\r\n            self.map_load_with_file_name(selected_item)\r\n        else:\r\n            print(\"선택된 항목이 없습니다.\")\r\n\r\n    def map_load_with_file_name(self, file_name):\r\n        self.file_index = int(file_name[4:-5])\r\n        self.Map_c.load_to_list(self.now_map[f\"room{self.file_index}.json\"])\r\n\r\n\r\nclass OptionTopLevel:\r\n    def __init__(self, root, x, y, Map_c, now_map, file_index):\r\n        self.setting_win = tk.Toplevel(root)\r\n        self.setting_win.title(\"속성\")\r\n        self.Map_c = Map_c\r\n        label1 = tk.Label(self.setting_win, text=f\"x={x}, y={y} 타일 속성\")\r\n        label1.grid(row=0, column=0, columnspan=2)\r\n        label_img = tk.Label(self.setting_win, text=\"img:\")\r\n        label_img.grid(row=1, column=0)\r\n\r\n        assets_items = list(self.Map_c.get_assets().keys())\r\n        combobox_img = ttk.Combobox(self.setting_win, values=assets_items)\r\n        try:\r\n            combobox_img.set(now_map[f\"room{file_index}.json\"][\"tilemap\"][f\"{x};{y}\"][\"img\"])\r\n        except KeyError:\r\n            combobox_img.set(\"None\")\r\n        combobox_img.grid(row=1, column=1)\r\n\r\n        label_type = tk.Label(self.setting_win, text=\"type:\")\r\n        label_type.grid(row=2, column=0)\r\n\r\n        combobox_type = ttk.Combobox(self.setting_win, values=[\"floor\", \"wall\"])\r\n        try:\r\n            combobox_type.set(now_map[f\"room{file_index}.json\"][\"tilemap\"][f\"{x};{y}\"][\"type\"])\r\n        except KeyError:\r\n            combobox_type.set(\"None\")\r\n        combobox_type.grid(row=2, column=1)\r\n\r\n        self.row = 4\r\n        self.event_label_list = []\r\n        self.event_dropdown_list = []\r\n        self.event_dropdown_item_list = []\r\n        self.event_button_minus_list = []\r\n        self.event_item_list = []\r\n\r\n        def add_label_and_dropdown(event=None, *args):\r\n            # 새 Label 추가\r\n            label_new = tk.Label(self.setting_win, text=\"이벤트\")\r\n            label_new.grid(row=self.row, column=0)\r\n            self.event_label_list.append(label_new)\r\n\r\n            # 새 Dropdown (Combobox) 추가\r\n            dropdown = ttk.Combobox(self.setting_win, values=[\"방 이동\"])\r\n            dropdown.grid(row=self.row, column=1)\r\n            dropdown.bind(\"<<ComboboxSelected>>\", self.on_combobox_change)\r\n            self.event_dropdown_list.append(dropdown)\r\n            self.event_dropdown_item_list.append(dropdown.get())\r\n            self.event_item_list.append([])\r\n\r\n            button_event_minus = tk.Button(\r\n                self.setting_win,\r\n                text=\"-\",\r\n                width=1,\r\n                height=1,\r\n                command=lambda: self.minus(button_event_minus)\r\n            )\r\n            button_event_minus.grid(row=self.row, column=2)\r\n            self.event_button_minus_list.append(button_event_minus)\r\n\r\n            self.button_apply.grid(row=self.row + 1, column=0, columnspan=2)\r\n\r\n            self.row += 1  # 행 번호 증가\r\n            if event == \"방 이동\":\r\n                dropdown.set(\"방 이동\")\r\n                self.room_move(self.row - 5, dropdown.grid_info(), args[0])\r\n\r\n        label_event = tk.Label(self.setting_win, text=\"event\")\r\n        label_event.grid(row=3, column=0)\r\n        button_event_add = tk.Button(\r\n            self.setting_win,\r\n            text=\"+\",\r\n            width=10,\r\n            command=add_label_and_dropdown\r\n        )\r\n        button_event_add.grid(row=3, column=1)\r\n\r\n        def apply_changes():\r\n            now_map[f\"room{file_index}.json\"][\"tilemap\"][f\"{x};{y}\"] = {\r\n                \"pos\": [x, y],\r\n                \"img\": combobox_img.get(),\r\n                \"type\": combobox_type.get(),\r\n                \"event\": []\r\n            }\r\n\r\n            for i in range(len(self.event_dropdown_item_list)):\r\n                event_name = self.event_dropdown_item_list[i]\r\n                if event_name == \"방 이동\":\r\n                    now_map[f\"room{file_index}.json\"][\"tilemap\"][f\"{x};{y}\"][\"event\"].append({\r\n                        \"type\": \"room_move\",\r\n                        \"room\": self.event_item_list[i][1].get()\r\n                    })\r\n\r\n            self.Map_c.load_to_list(now_map[f\"room{file_index}.json\"])\r\n\r\n            self.setting_win.destroy()\r\n\r\n        self.button_apply = tk.Button(\r\n            self.setting_win,\r\n            text=\"확인\",\r\n            width=10,\r\n            command=apply_changes\r\n        )\r\n        self.button_apply.grid(row=self.row, column=0, columnspan=2)\r\n\r\n        if now_map[f\"room{file_index}.json\"][\"tilemap\"][f\"{x};{y}\"].get(\"event\"):\r\n            for event in now_map[f\"room{file_index}.json\"][\"tilemap\"][f\"{x};{y}\"][\"event\"]:\r\n                if event[\"type\"] == \"room_move\":\r\n                    add_label_and_dropdown(\"방 이동\", event[\"room\"])\r\n\r\n    def on_combobox_change(self, event):\r\n        combobox = event.widget\r\n        selected_item = combobox.get()\r\n        combobox_index = self.event_dropdown_list.index(combobox)\r\n        if selected_item == \"방 이동\" and self.event_dropdown_item_list[combobox_index] != \"방 이동\":\r\n            self.room_move(combobox_index, combobox.grid_info())\r\n        elif self.event_dropdown_item_list[combobox_index] == \"방 이동\":\r\n            self.remove_event_item(combobox_index)\r\n\r\n    def room_move(self, index, grid_info, file_name=None):\r\n        self.event_dropdown_item_list[index] = \"방 이동\"\r\n        for i in range(index + 1, len(self.event_dropdown_list)):\r\n            label = self.event_label_list[i]\r\n            dropdown = self.event_dropdown_list[i]\r\n            button = self.event_button_minus_list[i]\r\n            label.grid(row=label.grid_info()[\"row\"]+1)\r\n            dropdown.grid(row=dropdown.grid_info()[\"row\"]+1)\r\n            button.grid(row=button.grid_info()[\"row\"]+1)\r\n        self.row += 1\r\n        self.button_apply.grid(row=self.row, column=0, columnspan=2)\r\n        label_new = tk.Label(self.setting_win, text=\"방 이름\")\r\n        label_new.grid(row=grid_info[\"row\"] + 1, column=0)\r\n\r\n        map_items = list(self.Map_c.get_map_list())\r\n        combobox_new = ttk.Combobox(self.setting_win, values=map_items)\r\n        combobox_new.grid(row=grid_info[\"row\"] + 1, column=1)\r\n        if file_name:\r\n            combobox_new.set(file_name)\r\n        self.event_item_list[index] = [label_new, combobox_new]\r\n\r\n    def remove_event_item(self, index):\r\n        for item in self.event_item_list[index]:\r\n            item.destroy()\r\n\r\n    def minus(self, button):\r\n        button_index = self.event_button_minus_list.index(button)\r\n        self.event_label_list[button_index].destroy()\r\n        self.event_label_list.pop(button_index)\r\n        self.event_dropdown_list[button_index].destroy()\r\n        self.event_dropdown_list.pop(button_index)\r\n        self.event_dropdown_item_list.pop(button_index)\r\n        self.event_button_minus_list[button_index].destroy()\r\n        self.event_button_minus_list.pop(button_index)\r\n        self.remove_event_item(button_index)\r\n        self.event_item_list.pop(button_index)\r\n\r\n\r\nM = Main()\r\nM.run()\r\nM.save_all()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RAGE _ BLOOD FRONTEER/Beta 1.0/1950MapEditor_Ver2.py b/RAGE _ BLOOD FRONTEER/Beta 1.0/1950MapEditor_Ver2.py
--- a/RAGE _ BLOOD FRONTEER/Beta 1.0/1950MapEditor_Ver2.py	(revision 135b313e49d64c6e1976046edf06ebb36c820375)
+++ b/RAGE _ BLOOD FRONTEER/Beta 1.0/1950MapEditor_Ver2.py	(date 1737459865678)
@@ -63,7 +63,7 @@
         self.tile_size = 60
         self.map_max = 30
 
-        self.Map_c = GameMap.Map(self.screen, pygame_in_game=pygame)
+        self.Map_c = GameMap.Map(self.screen, pygame_in_game=pygame, mode="Edit")
         self.file_index = 1
         self.select_IRID = 0
         self.mouserect = 0
@@ -410,7 +410,9 @@
             self.draw_preview()
 
             self.Map_c.draw()
-            self.Map_c.event()
+
+            delta_time = self.clock.tick(60) / 1000.0  # 1초당 프레임 (60FPS), delta_time은 초 단위
+            self.Map_c.event(delta_time)
 
             self.lines()
             self.draw_hider()
@@ -443,8 +445,6 @@
                     (750, 40))
             pygame.display.update()
 
-            self.clock.tick(60)
-
             # Tkinter 이벤트 처리 (화면 업데이트 및 이벤트 처리)
             self.root.update_idletasks()
             self.root.update()
Index: RAGE _ BLOOD FRONTEER/Beta 1.0/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport os\r\nfrom pathlib import Path\r\n\r\nimport pygame\r\nimport sys\r\nimport codes.MAP as GameMap\r\nimport codes.MAP_Ver2 as GameMap_ver2\r\nimport codes.cousor as cousor\r\nimport codes.opening as opening\r\nimport codes.msgbox as msgbox\r\nimport codes.gui as gui\r\nfrom codes.InputField import InputField\r\nfrom codes.auto_line import draw_text_with_letter_wrapping\r\n\r\npygame.init()\r\n# APPDATA와 LOCALAPPDATA 경로 가져오기\r\nappdata_path = Path(os.getenv('APPDATA')) / \"rage_blood_fronteer\"\r\nif not appdata_path.exists():\r\n    appdata_path.mkdir()\r\nmain_save_file = appdata_path / \"main.save\"\r\nprint(appdata_path)\r\nprint(main_save_file)\r\n\r\n# 기존은 1, 내(qwru0905)가 만든건 2\r\nversion = 2\r\n\r\n\r\nclass GuiSet:\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n\r\n    def gui_set(self):\r\n        self.gbar = gui.WidgetBar(100, 50, 150, 25, 100, \"data/img/ui/notanium1.png\", \"right\", (0, 0, 255),\r\n                                  current_value=0)\r\n        self.gbar.draw(screen=self.screen)\r\n\r\n\r\nclass SimpleButton:\r\n    def __init__(self, x, y, width, height, color, outline=None, text='', text_color=(0, 0, 0), font=None, img=''):\r\n        self.x = x\r\n        self.y = y\r\n        self.width = width\r\n        self.height = height\r\n        self.color = color\r\n        self.outline = outline\r\n        self.text = text\r\n        self.font = font if font is not None else pygame.font.Font(None, 30)\r\n        self.img = img\r\n        self.text_color = text_color\r\n\r\n    def draw(self, screen):\r\n        # 버튼에 외곽선이 있을 경우 그리기\r\n        if self.outline:\r\n            pygame.draw.rect(screen, self.outline, (self.x - 2, self.y - 2, self.width + 4, self.height + 4), 0)\r\n\r\n        # 버튼 그리기\r\n        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height), 0)\r\n\r\n        # 버튼에 텍스트가 있을 경우 텍스트 그리기\r\n        if self.text != '':\r\n            text = self.font.render(self.text, 1, self.text_color)\r\n            screen.blit(text, (\r\n                self.x + (self.width / 2 - text.get_width() / 2),\r\n                self.y + (self.height / 2 - text.get_height() / 2)\r\n            ))\r\n\r\n        # 버튼에 이미지가 있을 경우 이미지 그리기\r\n        if self.img != '':\r\n            img = pygame.image.load(self.img)\r\n            screen.blit(img, (\r\n                self.x + (self.width / 2 - img.get_width() / 2),\r\n                self.y + (self.height / 2 - img.get_height() / 2)\r\n            ))\r\n\r\n    def is_over(self, pos):\r\n        # pos는 마우스의 (x, y) 좌표\r\n        if self.x < pos[0] < self.x + self.width:\r\n            if self.y < pos[1] < self.y + self.height:\r\n                return True\r\n        return False\r\n\r\n\r\nclass Game:\r\n    def __init__(self):\r\n        self.now_time = None\r\n        self.screen_x, self.screen_y = 640, 480\r\n        self.screen = pygame.display.set_mode((self.screen_x, self.screen_y))\r\n        self.clock = pygame.time.Clock()\r\n        self.cousor_class_opening = cousor.Cousor(self.screen, 8, (140, 115), (120, 145), (58, 175), (58, 205))\r\n        self.opening = opening.Opening(self.screen)\r\n        self.gbar = GuiSet(self.screen)\r\n        self.msgbox = msgbox.MsgBox(self.screen, [\"2972년 11월 21일, 김두한이 죽은지 1000년이 지났을때.\", \"지구는 이미 생활하기 힘들 정도로 파괴되었다.\",\r\n                                                  \"그렇게 온 기술을 모아 지구에서는 우주선을 만들어 똑똑하고,\", \"유능한 일부의 개척민들과\",\r\n                                                  \"수천 개의 배아들을 실었다. \", \"그 우주선의 이름은 YJ-P1\", \"YJ-P1은 그렇게 인류의 새 개척지를 찾기 위한\",\r\n                                                  \"아주 길고도 긴 여행을 시작하게 된다.\"], 10, 0, 20)\r\n\r\n        # 0 : 기본값 = 오프닝\r\n        if not main_save_file.exists():\r\n            self.now_screen = 0\r\n            self.name = \"\"\r\n        else:\r\n            self.now_screen = 1\r\n            with open(main_save_file, 'r', encoding='utf-8') as f:\r\n                self.name = f.readline().strip()\r\n                print(self.name)\r\n\r\n        if version == 1:\r\n            self.Map_c = GameMap.Map(self.screen)\r\n        elif version == 2:\r\n            self.Map_c = GameMap_ver2.Map(self.screen)\r\n        self.input_field = InputField(self.screen, (120, 250), (400, 50), 40)\r\n        font = pygame.font.Font(\"data/font/font1.otf\", 30)\r\n        self.name_button = SimpleButton(170, 350, 300, 60, (255, 255, 255), text=\"확인\", font=font)\r\n        self.name_yes_button = SimpleButton(140, 280, 150, 60, (255, 255, 255), text=\"네\", font=font)\r\n        self.name_no_button = SimpleButton(350, 280, 150, 60, (255, 255, 255), text=\"아니요\", font=font)\r\n        self.is_say_bad_word = False\r\n\r\n        pygame.display.set_caption(\"RAGE: BLOOD FRONTEER\")\r\n\r\n    def run(self):\r\n        while True:\r\n            self.now_time = pygame.time.get_ticks()\r\n            events = pygame.event.get()  # 이벤트를 한 번만 가져옴\r\n\r\n            for event in events:\r\n                if event.type == pygame.QUIT or msgbox.IS_QUIT:\r\n                    pygame.quit()\r\n                    sys.exit()\r\n                if event.type == pygame.KEYDOWN:\r\n                    if self.now_screen == 1 and self.opening.get_text_len() >= 6:\r\n                        if event.key == pygame.K_UP:\r\n                            self.cousor_class_opening.cousor_up()\r\n                        if event.key == pygame.K_DOWN:\r\n                            self.cousor_class_opening.cousor_down()\r\n                        if event.key == pygame.K_RETURN:\r\n                            if self.cousor_class_opening.get_cousor_index() == 0:\r\n                                self.now_screen = 2\r\n            if self.now_screen == 0:\r\n                self.say_your_name(self.screen, events)\r\n            if self.now_screen == 1:\r\n                self.opening.run()\r\n                if self.opening.get_text_len() >= 6:\r\n                    self.cousor_class_opening.draw()\r\n            if self.now_screen == 2:\r\n                self.msgbox.run(events)\r\n                if not self.msgbox.is_running():\r\n                    self.now_screen = 3\r\n                    self.Map_c.load_to_list(self.Map_c.mapGet(1))\r\n                    self.Map_c.draw_set()\r\n                    self.Map_c.brickPassSet(1)\r\n            if self.now_screen == 3:\r\n                self.main_screen(events)\r\n            pygame.display.update()\r\n            self.screen.fill(0)\r\n            self.clock.tick(60)\r\n\r\n    def main_screen(self, events):\r\n        self.Map_c.draw()\r\n        self.Map_c.event()\r\n\r\n        self.gbar.gui_set()\r\n\r\n    def say_your_name(self, screen, events):\r\n        text = \"당신의 이름은 무엇입니까?\"\r\n        name_font = pygame.font.Font(\"data/font/font1.otf\", 40)\r\n        font = pygame.font.Font(\"data/font/font1.otf\", 40)\r\n        with open(\"data/fuck_list.json\", \"r\", encoding=\"utf8\") as file:\r\n            fuck_list = json.load(file)[\"badwords\"]\r\n        if name_font.size(self.input_field.get_text())[0] > 400:\r\n            text = \"잠시만요, 당신 이름이 이 텍스트 박스 안에 다 안 들어가요?\"\r\n\r\n        if self.is_say_bad_word:\r\n            text = \"나쁜 말은 안돼요!\"\r\n\r\n        draw_text_with_letter_wrapping(screen, text, font, (255, 255, 255),\r\n                                       0, 100, 640, \"center\")\r\n\r\n        self.input_field.event(events)\r\n        self.input_field.draw()\r\n        if self.name_button.is_over(pygame.mouse.get_pos()):\r\n            self.name_button.color = (127, 127, 127)\r\n            if pygame.mouse.get_pressed()[0]:\r\n                self.input_field.set_state(True)\r\n        else:\r\n            self.name_button.color = (255, 255, 255)\r\n        self.name_button.draw(self.screen)\r\n        if self.input_field.is_completed():\r\n            if self.input_field.get_text() in fuck_list:\r\n                self.is_say_bad_word = True\r\n                self.input_field.set_state(False)\r\n                return\r\n            self.name = self.input_field.get_text()\r\n            pygame.draw.rect(screen, (255, 255, 255), (98, 98, 444, 284), 0)\r\n            pygame.draw.rect(screen, (0, 0, 0), (100, 100, 440, 280), 0)\r\n            font = pygame.font.Font(\"data/font/font1.otf\", 30)\r\n\r\n            # 이름 이스터애그들\r\n            creator_name = [\"qwru0905\"]\r\n            with open(\"data/hangul_almost_no_used.txt\", \"rb\") as file:\r\n                hangul_almost_no_used_text = file.read().decode('utf-8')\r\n                hangul_almost_no_used_list = hangul_almost_no_used_text.split(\" \")\r\n            if name_font.size(self.name)[0] > 400:\r\n                text = \"와... 엄청 긴 이름을 가졌군요?\"\r\n            elif len(self.name) == 1:\r\n                text = \"와... 엄청 짧은 이름을 가졌군요?\"\r\n            elif len(self.name) == 0:\r\n                text = \"와... 아무것도 안 쓰셨네요?\"\r\n            elif self.name in creator_name:\r\n                text = \"오, 당신 이름이 저희 개발자 중 한 분이랑 겹치네요?\"\r\n            else:\r\n                is_include_hangul_almost_no_used = False\r\n                for char in self.name:\r\n                    if char in hangul_almost_no_used_list:\r\n                        text = f\"와... 당신 이름에 뭔가 잘 쓰이지 않는 글자가 들어가 있는 것 같네요.\"\r\n                        is_include_hangul_almost_no_used = True\r\n                        break\r\n                if not is_include_hangul_almost_no_used:\r\n                    text = f\"당신의 이름이 {self.name}이 맞습니까?\"\r\n            draw_text_with_letter_wrapping(screen, text, font, (255, 255, 255),\r\n                                           0, 150, 400, \"center\")\r\n\r\n            self.name_yes_button.draw(screen)\r\n            self.name_no_button.draw(screen)\r\n            for event in events:\r\n                if event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_RETURN:\r\n                        self.name_yes()\r\n                    if event.key == pygame.K_ESCAPE:\r\n                        self.name_no()\r\n            if self.name_yes_button.is_over(pygame.mouse.get_pos()):\r\n                self.name_yes_button.color = (127, 127, 127)\r\n                if pygame.mouse.get_pressed()[0]:\r\n                    self.name_yes()\r\n            else:\r\n                self.name_yes_button.color = (255, 255, 255)\r\n            if self.name_no_button.is_over(pygame.mouse.get_pos()):\r\n                self.name_no_button.color = (127, 127, 127)\r\n                if pygame.mouse.get_pressed()[0]:\r\n                    self.name_no()\r\n            else:\r\n                self.name_no_button.color = (255, 255, 255)\r\n\r\n    def name_yes(self):\r\n        with open(main_save_file, \"w+\", encoding=\"utf8\") as file:\r\n            file.write(self.name)\r\n        self.now_screen = 1\r\n\r\n    def name_no(self):\r\n        self.input_field.set_state(False)\r\n\r\n\r\nG = Game()\r\nG.run()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RAGE _ BLOOD FRONTEER/Beta 1.0/main.py b/RAGE _ BLOOD FRONTEER/Beta 1.0/main.py
--- a/RAGE _ BLOOD FRONTEER/Beta 1.0/main.py	(revision 135b313e49d64c6e1976046edf06ebb36c820375)
+++ b/RAGE _ BLOOD FRONTEER/Beta 1.0/main.py	(date 1737459936007)
@@ -116,10 +116,13 @@
         self.name_no_button = SimpleButton(350, 280, 150, 60, (255, 255, 255), text="아니요", font=font)
         self.is_say_bad_word = False
 
+        self.delta_time = 0
+
         pygame.display.set_caption("RAGE: BLOOD FRONTEER")
 
     def run(self):
         while True:
+            self.delta_time = self.clock.tick(60) / 1000.0  # 1초당 프레임 (60FPS), delta_time은 초 단위
             self.now_time = pygame.time.get_ticks()
             events = pygame.event.get()  # 이벤트를 한 번만 가져옴
 
@@ -148,18 +151,20 @@
                     self.now_screen = 3
                     self.Map_c.load_to_list(self.Map_c.mapGet(1))
                     self.Map_c.draw_set()
-                    self.Map_c.brickPassSet(1)
             if self.now_screen == 3:
                 self.main_screen(events)
             pygame.display.update()
             self.screen.fill(0)
-            self.clock.tick(60)
 
     def main_screen(self, events):
-        self.Map_c.draw()
-        self.Map_c.event()
-
-        self.gbar.gui_set()
+        if version == 1:
+            self.Map_c.draw()
+            self.Map_c.event()
+            self.gbar.gui_set()
+        elif version == 2:
+            self.Map_c.draw()
+            self.Map_c.event(self.delta_time)
+            self.gbar.gui_set()
 
     def say_your_name(self, screen, events):
         text = "당신의 이름은 무엇입니까?"
Index: RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2/room1.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n    \"size\": [\r\n        20,\r\n        20\r\n    ],\r\n    \"startpos\": [\r\n        0,\r\n        -1\r\n    ],\r\n    \"tilemap\": {\r\n        \"10;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                10,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"10;11\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                10,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"10;3\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                10,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"10;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                10,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"10;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                10,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"10;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                10,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"10;7\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                10,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"10;8\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                10,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"10;9\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                10,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"11;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"water\",\r\n            \"pos\": [\r\n                11,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"11;11\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                11,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"11;3\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                11,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"11;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                11,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"11;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                11,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"11;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"lava\",\r\n            \"pos\": [\r\n                11,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"11;7\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor2\",\r\n            \"pos\": [\r\n                11,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"11;8\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                11,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"11;9\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                11,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                12,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;11\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                12,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;13\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                12,\r\n                13\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;3\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                12,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                12,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                12,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                12,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;7\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor2\",\r\n            \"pos\": [\r\n                12,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;8\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                12,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"12;9\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                12,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                13,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;11\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                13,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;13\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                13,\r\n                13\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;3\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                13,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor2\",\r\n            \"pos\": [\r\n                13,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                13,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;6\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                13,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;7\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                13,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;8\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"water\",\r\n            \"pos\": [\r\n                13,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"13;9\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                13,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                14,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;11\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                14,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;13\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                14,\r\n                13\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;14\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                14,\r\n                14\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;3\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                14,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                14,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                14,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                14,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;7\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                14,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;8\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                14,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"14;9\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                14,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;10\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                15,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;11\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                15,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;12\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                15,\r\n                12\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;14\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                15,\r\n                14\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;3\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                15,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                15,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                15,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                15,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;7\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                15,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;8\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                15,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"15;9\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                15,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;10\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                16,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;11\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                16,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;12\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                16,\r\n                12\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;14\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                16,\r\n                14\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;3\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                16,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                16,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                16,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                16,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;7\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                16,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;8\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                16,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"16;9\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                16,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;10\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                17,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;11\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                17,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;12\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                17,\r\n                12\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;14\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                17,\r\n                14\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;3\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                17,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                17,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                17,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                17,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;7\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                17,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;8\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                17,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"17;9\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                17,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;10\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                18,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;11\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                18,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;12\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                18,\r\n                12\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;14\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                18,\r\n                14\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                18,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                18,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                18,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;7\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                18,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;8\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                18,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"18;9\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                18,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                19,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;11\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                19,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;12\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                19,\r\n                12\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;14\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                19,\r\n                14\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                19,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                19,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                19,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;7\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                19,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;8\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                19,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"19;9\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                19,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"1;1\": {\r\n            \"event\": [\r\n                {\r\n                    \"room\": \"room3.json\",\r\n                    \"type\": \"room_move\"\r\n                }\r\n            ],\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                1,\r\n                1\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"20;14\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                20,\r\n                14\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"3;3\": {\r\n            \"event\": [\r\n                {\r\n                    \"room\": \"room3.json\",\r\n                    \"type\": \"room_move\"\r\n                }\r\n            ],\r\n            \"img\": \"SpaceTileCorner3\",\r\n            \"pos\": [\r\n                3,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"3;4\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide3\",\r\n            \"pos\": [\r\n                3,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"3;5\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileCorner2\",\r\n            \"pos\": [\r\n                3,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"3;7\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileCorner3\",\r\n            \"pos\": [\r\n                3,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"3;8\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileCorner2\",\r\n            \"pos\": [\r\n                3,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"4;3\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide2\",\r\n            \"pos\": [\r\n                4,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"4;4\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                4,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"4;5\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide1\",\r\n            \"pos\": [\r\n                4,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"4;7\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide2\",\r\n            \"pos\": [\r\n                4,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"4;8\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide1\",\r\n            \"pos\": [\r\n                4,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"5;10\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                5,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"5;11\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                5,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"5;3\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide2\",\r\n            \"pos\": [\r\n                5,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"5;4\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                5,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"5;5\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide1\",\r\n            \"pos\": [\r\n                5,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"5;7\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                5,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"5;8\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                5,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"5;9\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                5,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"6;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"furnance\",\r\n            \"pos\": [\r\n                6,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"6;11\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                6,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"6;3\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide2\",\r\n            \"pos\": [\r\n                6,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"6;4\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTile1\",\r\n            \"pos\": [\r\n                6,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"6;5\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide1\",\r\n            \"pos\": [\r\n                6,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"6;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                6,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"6;7\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                6,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"6;8\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                6,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"6;9\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                6,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"7;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                7,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"7;11\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                7,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"7;3\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileCorner4\",\r\n            \"pos\": [\r\n                7,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"7;4\": {\r\n            \"IRID\": 0,\r\n            \"img\": \"SpaceTileSide4\",\r\n            \"pos\": [\r\n                7,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"7;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                7,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"7;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor2\",\r\n            \"pos\": [\r\n                7,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"7;7\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                7,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"7;8\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor1\",\r\n            \"pos\": [\r\n                7,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"7;9\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                7,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"8;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor2\",\r\n            \"pos\": [\r\n                8,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"8;11\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                8,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"8;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                8,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"8;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                8,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"8;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                8,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"8;7\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                8,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"8;8\": {\r\n            \"IRID\": 4,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                8,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"8;9\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                8,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"9;10\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                9,\r\n                10\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"9;11\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                9,\r\n                11\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"9;3\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                9,\r\n                3\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"9;4\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                9,\r\n                4\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"9;5\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor2\",\r\n            \"pos\": [\r\n                9,\r\n                5\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"9;6\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                9,\r\n                6\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"9;7\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                9,\r\n                7\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"9;8\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor2\",\r\n            \"pos\": [\r\n                9,\r\n                8\r\n            ],\r\n            \"type\": \"wall\"\r\n        },\r\n        \"9;9\": {\r\n            \"IRID\": 1,\r\n            \"img\": \"PlanetFloor3\",\r\n            \"pos\": [\r\n                9,\r\n                9\r\n            ],\r\n            \"type\": \"wall\"\r\n        }\r\n    },\r\n    \"type\": \"wall\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2/room1.json b/RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2/room1.json
--- a/RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2/room1.json	(revision 135b313e49d64c6e1976046edf06ebb36c820375)
+++ b/RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2/room1.json	(date 1737447053523)
@@ -4,8 +4,8 @@
         20
     ],
     "startpos": [
-        0,
-        -1
+        10,
+        10
     ],
     "tilemap": {
         "10;10": {
Index: RAGE _ BLOOD FRONTEER/Beta 1.0/codes/MAP_Ver2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport os\r\n\r\n\r\ndef get_key(val, dict):\r\n    \"\"\"\r\n    리스트의 키를 가져옵니다.\r\n    :param val: 값\r\n    :param dict: 리스트\r\n    :return: 리스트에 있는 값에 해당하는 키 (없을 경우 None을 반환함)\r\n    \"\"\"\r\n    for key, value in dict.items():\r\n        if val == value:\r\n            return key\r\n\r\n    return None\r\n\r\n\r\nclass Map:\r\n    def __init__(self, screen, map_dir=\"data/map_Ver2\", pygame_in_game=None, mode=\"Play\"):\r\n        \"\"\"\r\n        Map 클래스,\r\n        :param screen: pygame의 스크린\r\n        :param map_dir: 맵 위치\r\n        :param pygame_in_game: pygame 객체 (기본값 None)\r\n        :param mode: \"Play\" or \"Edit\"\r\n        \"\"\"\r\n\r\n        if pygame_in_game is not None:\r\n            global pygame\r\n            pygame = pygame_in_game\r\n        else:\r\n            import pygame  # 기본 pygame을 참조\r\n\r\n        # tile, lava, water, furnance 같은 타일의 이미지 로드\r\n        self.assets = {\r\n            \"SpaceTile1\": pygame.image.load(\"data/img/tile/SPACESHIPS/SpaceTile1.png\"),\r\n            \"SpaceTileCorner1\": pygame.image.load(\"data/img/tile/SPACESHIPS/SpaceTileCorner1.png\"),\r\n            \"SpaceTileCorner2\": pygame.image.load(\"data/img/tile/SPACESHIPS/SpaceTileCorner2.png\"),\r\n            \"SpaceTileCorner3\": pygame.image.load(\"data/img/tile/SPACESHIPS/SpaceTileCorner3.png\"),\r\n            \"SpaceTileCorner4\": pygame.image.load(\"data/img/tile/SPACESHIPS/SpaceTileCorner4.png\"),\r\n            \"SpaceTileSide1\": pygame.image.load(\"data/img/tile/SPACESHIPS/SpaceTileSide1.png\"),\r\n            \"SpaceTileSide2\": pygame.image.load(\"data/img/tile/SPACESHIPS/SpaceTileSide2.png\"),\r\n            \"SpaceTileSide3\": pygame.image.load(\"data/img/tile/SPACESHIPS/SpaceTileSide3.png\"),\r\n            \"SpaceTileSide4\": pygame.image.load(\"data/img/tile/SPACESHIPS/SpaceTileSide4.png\"),\r\n            \"PlanetFloor1\": pygame.image.load(\"data/img/tile/planet/PlanetFloor1.png\"),\r\n            \"PlanetFloor2\": pygame.image.load(\"data/img/tile/planet/PlanetFloor2.png\"),\r\n            \"PlanetFloor3\": pygame.image.load(\"data/img/tile/planet/PlanetFloor3.png\"),\r\n            \"lava\": pygame.image.load(\"data/img/tile/planet/lava.png\"),\r\n            \"water\": pygame.image.load(\"data/img/tile/planet/water.png\"),\r\n            \"furnance\": pygame.image.load(\"data/img/tile/planet/furnance.png\"),\r\n            \"Player\": pygame.image.load(\"data/img/player/test.png\")\r\n        }\r\n\r\n        self.root = screen  # 스크린 설정\r\n        self.tilesize = 60  # 타일 기본 크기\r\n        self.mapW, self.mapH = 0, 0  # map 가로, 세로 설정\r\n\r\n        self.tile_list = []\r\n        self.move_pos = [0, 0]\r\n        self.move_speed = 5\r\n\r\n        # map 설정\r\n        self.map = {}\r\n        self.map_dir = map_dir\r\n\r\n        # 특정 폴더 내 JSON 파일들 전부 읽어오기\r\n        for filename in os.listdir(self.map_dir):\r\n            if filename.endswith(\".json\"):  # JSON 파일만 처리\r\n                with open(os.path.join(self.map_dir, filename), 'r', encoding='utf-8') as f:\r\n                    self.map[filename] = json.load(f)\r\n\r\n    def load_to_list(self, value):\r\n        \"\"\"\r\n        value에서 가져온 맵 json을 이 클래스의 list들로 변환합니다.\r\n        변하는 리스트는 다음과 같습니다:\r\n            tile_list (json 파일에 있는 타일을 여기에 넣음)\r\n            mapW, mapH\r\n        :param value: json 파일에서 가져온 리스트를 바로 넣습니다.\r\n        예시: load_to_list(json.load(open(\"data/map/room1.json\")))\r\n        \"\"\"\r\n        self.tile_list = []\r\n        self.mapW, self.mapH = value[\"size\"]\r\n        for w in range(1, self.mapW + 2):\r\n            for h in range(1, self.mapH + 2):\r\n                try:\r\n                    p = value[\"tilemap\"][f\"{w};{h}\"]\r\n                    self.tile_list.append(p)\r\n                except KeyError:\r\n                    pass\r\n\r\n    def draw_set(self):\r\n        \"\"\"\r\n        draw를 하기에 앞써서 쓰는 코드로 추정\r\n        \"\"\"\r\n        # self.move_pos를 self.map[1][\"startpos\"] (0, -1) 에 30을 곱해 넣습니다. (0, -30)\r\n        self.move_pos = list(map(lambda x: x * 30, self.map[\"room1.json\"][\"startpos\"]))\r\n\r\n        # 모든 assets의 키들 돌아가면서\r\n        # 키가 \"Player\"로 시작하지 않으면\r\n        # assets[key]의 크기를 타일 크기로 지정한다.\r\n        for i in self.assets.values():\r\n            r = get_key(i, self.assets)\r\n            print(r[:6])\r\n            if r[:6] != \"Player\":\r\n                self.assets[r] = pygame.transform.scale(self.assets[r], (self.tilesize, self.tilesize))\r\n\r\n    def var_set(self, type, result):\r\n        \"\"\"\r\n        self.type를 result로 정합니다.\r\n        (왜 만든거임)\r\n        :param type: 변수\r\n        :param result: 값\r\n        \"\"\"\r\n        setattr(self, type, result)\r\n\r\n    def draw(self):\r\n        \"\"\"\r\n        그립니다.\r\n        (당연하게도)\r\n        \"\"\"\r\n        if len(self.tile_list) != 0:\r\n            # tile을 draw합니다.\r\n            for tile in self.tile_list:\r\n                try:\r\n                    self.root.blit(self.assets[tile[\"img\"]],\r\n                                   (tile[\"pos\"][0] * self.tilesize - self.tilesize + self.move_pos[0],\r\n                                    tile[\"pos\"][1] * self.tilesize - self.tilesize + self.move_pos[1]))\r\n\r\n                except IndexError:\r\n                    pass\r\n\r\n    def mapGet(self, mapNumber):\r\n        \"\"\"\r\n        map을 반환합니다.\r\n        :param mapNumber: 맵 번호\r\n        :return: 번호에 해당하는 맵\r\n        \"\"\"\r\n        return self.map[f\"room{mapNumber}.json\"]\r\n\r\n    def get_all_map(self):\r\n        \"\"\"\r\n        map 전체를 반환합니다.\r\n        :return: self.map\r\n        \"\"\"\r\n        return self.map\r\n\r\n    # def map_dataEdit(self, mapNumber):\r\n\r\n    def event(self, events=None):\r\n        # 충돌 / 이동감지\r\n        # (이동은 movetile이라는 list를 만들어서 그걸로 이벤트 처리)\r\n        collides = [0, 0, 0, 0]\r\n        movetype = [0, 0, 0, 0]\r\n        keys = pygame.key.get_pressed()\r\n        if keys[pygame.K_w]:\r\n            movetype[0] = 1\r\n        if keys[pygame.K_s]:\r\n            movetype[1] = 1\r\n        if keys[pygame.K_d]:\r\n            movetype[2] = 1\r\n        if keys[pygame.K_a]:\r\n            movetype[3] = 1\r\n\r\n        if movetype[0] == 1 and not collides[0]:\r\n            self.move_pos[1] += self.move_speed\r\n\r\n        if movetype[1] == 1 and not collides[1]:\r\n            self.move_pos[1] -= self.move_speed\r\n\r\n        if movetype[2] == 1 and not collides[2]:\r\n            self.move_pos[0] -= self.move_speed\r\n\r\n        if movetype[3] == 1 and not collides[3]:\r\n            self.move_pos[0] += self.move_speed\r\n        return movetype\r\n\r\n    def moveposGet(self):\r\n        \"\"\"\r\n        move_pos (카메라 위치)를 리턴합니다.\r\n        :return: self.move_pos\r\n        \"\"\"\r\n        return self.move_pos\r\n\r\n    def get_map_list(self):\r\n        \"\"\"\r\n        맵 리스트를 반환합니다.\r\n        :return: self.map의 키\r\n        \"\"\"\r\n        return self.map.keys()\r\n\r\n    def reload_file(self):\r\n        # map 설정\r\n        self.map = {}\r\n\r\n        # 특정 폴더 내 JSON 파일들 전부 읽어오기\r\n        for filename in os.listdir(self.map_dir):\r\n            if filename.endswith(\".json\"):  # JSON 파일만 처리\r\n                with open(os.path.join(self.map_dir, filename), 'r', encoding='utf-8') as f:\r\n                    self.map[filename] = json.load(f)\r\n\r\n    def get_size(self):\r\n        \"\"\"\r\n        맵의 사이즈를 반환합니다.\r\n        :return: [self.mapW, self.mapH]\r\n        \"\"\"\r\n        return [self.mapW, self.mapH]\r\n\r\n    def get_assets(self):\r\n        \"\"\"\r\n        assets를 반환합니다.\r\n        :return: self.assets\r\n        \"\"\"\r\n        return self.assets\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/MAP_Ver2.py b/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/MAP_Ver2.py
--- a/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/MAP_Ver2.py	(revision 135b313e49d64c6e1976046edf06ebb36c820375)
+++ b/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/MAP_Ver2.py	(date 1737517607695)
@@ -23,7 +23,7 @@
         :param screen: pygame의 스크린
         :param map_dir: 맵 위치
         :param pygame_in_game: pygame 객체 (기본값 None)
-        :param mode: "Play" or "Edit"
+        :param mode: "Play" or "Edit" (기본값 "Play")
         """
 
         if pygame_in_game is not None:
@@ -58,7 +58,12 @@
 
         self.tile_list = []
         self.move_pos = [0, 0]
-        self.move_speed = 5
+
+        self.mode = mode
+        if self.mode == "Play":
+            self.move_speed = 200
+        else:
+            self.move_speed = 350
 
         # map 설정
         self.map = {}
@@ -93,8 +98,10 @@
         """
         draw를 하기에 앞써서 쓰는 코드로 추정
         """
-        # self.move_pos를 self.map[1]["startpos"] (0, -1) 에 30을 곱해 넣습니다. (0, -30)
-        self.move_pos = list(map(lambda x: x * 30, self.map["room1.json"]["startpos"]))
+        if self.mode == "Play":
+            self.move_pos = self.map["room1.json"]["startpos"]
+        else:
+            self.move_pos = [0, 0]
 
         # 모든 assets의 키들 돌아가면서
         # 키가 "Player"로 시작하지 않으면
@@ -104,31 +111,41 @@
             print(r[:6])
             if r[:6] != "Player":
                 self.assets[r] = pygame.transform.scale(self.assets[r], (self.tilesize, self.tilesize))
-
-    def var_set(self, type, result):
-        """
-        self.type를 result로 정합니다.
-        (왜 만든거임)
-        :param type: 변수
-        :param result: 값
-        """
-        setattr(self, type, result)
+            else:
+                img_w = self.assets[r].get_size()[0]
+                change = self.tilesize / img_w
+                self.assets[r] = pygame.transform.scale(self.assets[r],
+                                                        (self.tilesize, self.assets[r].get_size()[1] * change))
 
     def draw(self):
         """
         그립니다.
         (당연하게도)
         """
-        if len(self.tile_list) != 0:
-            # tile을 draw합니다.
-            for tile in self.tile_list:
-                try:
-                    self.root.blit(self.assets[tile["img"]],
-                                   (tile["pos"][0] * self.tilesize - self.tilesize + self.move_pos[0],
-                                    tile["pos"][1] * self.tilesize - self.tilesize + self.move_pos[1]))
+        print(self.move_pos)
+        if self.mode == "Play":
+            if len(self.tile_list) != 0:
+                # tile을 draw합니다.
+                for tile in self.tile_list:
+                    try:
+                        self.root.blit(self.assets[tile["img"]],
+                                       (tile["pos"][0] * self.tilesize - self.tilesize - (self.move_pos[0] - 4.83) * 60,
+                                        tile["pos"][1] * self.tilesize - self.tilesize - (self.move_pos[1]-3.5) * 60))
+
+                    except IndexError:
+                        pass
+            self.root.blit(self.assets["Player"], (290, 150))
+        else:
+            if len(self.tile_list) != 0:
+                # tile을 draw합니다.
+                for tile in self.tile_list:
+                    try:
+                        self.root.blit(self.assets[tile["img"]],
+                                       (tile["pos"][0] * self.tilesize - self.tilesize + self.move_pos[0],
+                                        tile["pos"][1] * self.tilesize - self.tilesize + self.move_pos[1]))
 
-                except IndexError:
-                    pass
+                    except IndexError:
+                        pass
 
     def mapGet(self, mapNumber):
         """
@@ -147,10 +164,7 @@
 
     # def map_dataEdit(self, mapNumber):
 
-    def event(self, events=None):
-        # 충돌 / 이동감지
-        # (이동은 movetile이라는 list를 만들어서 그걸로 이벤트 처리)
-        collides = [0, 0, 0, 0]
+    def event(self, delta_time, events=None):
         movetype = [0, 0, 0, 0]
         keys = pygame.key.get_pressed()
         if keys[pygame.K_w]:
@@ -162,18 +176,30 @@
         if keys[pygame.K_a]:
             movetype[3] = 1
 
-        if movetype[0] == 1 and not collides[0]:
-            self.move_pos[1] += self.move_speed
+        if self.mode == "Play":
+            if movetype[0] == 1:  # W
+                self.move_pos[1] -= self.move_speed * delta_time
+
+            if movetype[1] == 1:  # S
+                self.move_pos[1] += self.move_speed * delta_time
 
-        if movetype[1] == 1 and not collides[1]:
-            self.move_pos[1] -= self.move_speed
+            if movetype[2] == 1:  # D
+                self.move_pos[0] += self.move_speed * delta_time
 
-        if movetype[2] == 1 and not collides[2]:
-            self.move_pos[0] -= self.move_speed
+            if movetype[3] == 1:  # A
+                self.move_pos[0] -= self.move_speed * delta_time
+        else:
+            if movetype[0] == 1:
+                self.move_pos[1] += self.move_speed * delta_time
 
-        if movetype[3] == 1 and not collides[3]:
-            self.move_pos[0] += self.move_speed
-        return movetype
+            if movetype[1] == 1:
+                self.move_pos[1] -= self.move_speed * delta_time
+
+            if movetype[2] == 1:
+                self.move_pos[0] -= self.move_speed * delta_time
+
+            if movetype[3] == 1:
+                self.move_pos[0] += self.move_speed * delta_time
 
     def moveposGet(self):
         """
Index: RAGE _ BLOOD FRONTEER/Beta 1.0/codes/fullscreen_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/fullscreen_test.py b/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/fullscreen_test.py
new file mode 100644
--- /dev/null	(date 1737445815581)
+++ b/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/fullscreen_test.py	(date 1737445815581)
@@ -0,0 +1,22 @@
+import pygame
+from pygame.locals import *
+import ctypes  # 해상도 구하는 용도
+
+surface = pygame.display.set_mode((500, 500))
+is_fullscreen = False
+
+while True:
+    for event in pygame.event.get():
+        if event.type == KEYDOWN:
+            if event.key == pygame.K_f:  # f 키를 눌렀을 때
+                if is_fullscreen:
+                    surface = pygame.display.set_mode((500, 500))
+                    is_fullscreen = False
+                else:
+                    user32 = ctypes.windll.user32
+                    screensize = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)  # 해상도 구하기
+                    surface = pygame.display.set_mode(screensize, FULLSCREEN)  # 전체화면으로 전환
+                    is_fullscreen = True
+
+    pygame.display.update()
+    surface.fill((255, 255, 255))
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BookmarksViewState\">\r\n    <option name=\"rewriteBookmarkType\" value=\"true\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"67dcdbfd-481c-47e8-b6b7-ce60f30bdd14\" name=\"변경\" comment=\"2025.1.20&#10;1950MapEditor 굉장히 많은 수정 (1950MapEditor_Ver2.py)\">\r\n      <change afterPath=\"$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/data/img/player/test.png\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/MAP_Ver2.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/MAP_Ver2.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/README.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/README.md\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;jiwootv&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/jiwootv/rage_blood_fronteer.git&quot;,\r\n    &quot;accountId&quot;: &quot;128c3804-e89e-4e44-9153-8b4b34f84c65&quot;\r\n  }\r\n}</component>\r\n  <component name=\"NamedScopeManager\">\r\n    <scope name=\"projects\" pattern=\"file[NEW_rbf]:RAGE _ BLOOD FRONTEER/Beta 1.0/*\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2rWm6Ow6KFp2yhGGi11pEUhW6FL\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.1950MapEditor.executor\": \"Run\",\r\n    \"Python.1950MapEditor_Ver2.executor\": \"Run\",\r\n    \"Python.InputField.executor\": \"Run\",\r\n    \"Python.KeyEventTkinterToPygame.executor\": \"Run\",\r\n    \"Python.MAP.executor\": \"Run\",\r\n    \"Python.MAP_Ver2.executor\": \"Run\",\r\n    \"Python.TESTFONT.executor\": \"Run\",\r\n    \"Python.asdfasdf_hangul_almost_no_used.executor\": \"Run\",\r\n    \"Python.buildingSystem_test.executor\": \"Run\",\r\n    \"Python.cousor.executor\": \"Run\",\r\n    \"Python.get_name_ui.executor\": \"Run\",\r\n    \"Python.gui.executor\": \"Run\",\r\n    \"Python.hangulInputBox.executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"Python.msgbox.executor\": \"Run\",\r\n    \"Python.popup_prototype.executor\": \"Run\",\r\n    \"Python.pygame_in_tkinter.executor\": \"Run\",\r\n    \"Python.pygame_tkinter_test1.executor\": \"Run\",\r\n    \"Python.pygame_tkiter_test.executor\": \"Run\",\r\n    \"Python.text_editor.executor\": \"Run\",\r\n    \"Python.videoPlay.executor\": \"Run\",\r\n    \"Python.자동 줄바꿈.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"last_opened_file_path\": \"D:/chris/my_python/rage_blood_fronteer/RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2\",\r\n    \"settings.editor.selected.configurable\": \"inlay.hints\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\chris\\my_python\\rage_blood_fronteer\\RAGE _ BLOOD FRONTEER\\Beta 1.0\\data\\map_Ver2\" />\r\n      <recent name=\"D:\\chris\\my_python\\rage_blood_fronteer\\RAGE _ BLOOD FRONTEER\\Beta 1.0\\code\" />\r\n      <recent name=\"D:\\chris\\my_python\\rage_blood_fronteer\\RAGE _ BLOOD FRONTEER\\Beta 1.0\\data\" />\r\n      <recent name=\"D:\\chris\\my_python\\rage_blood_fronteer\\RAGE _ BLOOD FRONTEER\\Beta 1.0\" />\r\n      <recent name=\"D:\\chris\\my_python\\rage_blood_fronteer\\RAGE _ BLOOD FRONTEER\\Beta 1.0\\data\\font\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\chris\\my_python\\rage_blood_fronteer\\RAGE _ BLOOD FRONTEER\\Beta 1.0\\data\\video\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.1950MapEditor_Ver2\">\r\n    <configuration name=\"1950MapEditor\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"NEW_rbf\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.12 (rage_blood_fronteer)\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$ContentRoot$\\RAGE _ BLOOD FRONTEER\\Beta 1.0\\\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"1950MapEditor.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"1950MapEditor_Ver2\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"NEW_rbf\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.12 (rage_blood_fronteer)\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$ContentRoot$\\RAGE _ BLOOD FRONTEER\\Beta 1.0\\\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"1950MapEditor_Ver2.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"NEW_rbf\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.12 (rage_blood_fronteer)\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$ContentRoot$\\RAGE _ BLOOD FRONTEER\\Beta 1.0\\\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.main\" />\r\n      <item itemvalue=\"Python.1950MapEditor\" />\r\n      <item itemvalue=\"Python.1950MapEditor_Ver2\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"애플리케이션 수준\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"디폴트 작업\">\r\n      <changelist id=\"67dcdbfd-481c-47e8-b6b7-ce60f30bdd14\" name=\"변경\" comment=\"\" />\r\n      <created>1736683029068</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1736683029068</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"2025.01.12 최초의 커밋\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1736683320690</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1736683320690</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"2025.01.13&#10;주석 달기, 코드 최적화&#10;(0112_1.mp4, buildingSystem_test.py, videoPlay.py 제외)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1736771583990</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1736771583990</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"2025.01.13&#10;주석 달기, 코드 최적화&#10;(0112_1.mp4, buildingSystem_test.py, videoPlay.py 제외)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1736772757530</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1736772757530</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"2025.1.16&#10;msgbox.py 프레임 유지 수정&#10;1950MapEditor.py에서 마우스에 있는 타일과 화변 보조 ui에서 나오는 타일이 다른 버그를 수정\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737033589510</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737033589510</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"2025.1.17&#10;main.py 대거 수정&#10;이름 물어보는 창 만듬&#10;메인 화면에서 맵 볼수 있게 만듬\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737093052167</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737093052167</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"2025.1.17&#10;이름 선택 창 수정&#10;일어랑 한국어 동시에 안나오는 버그 수정\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737110665167</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737110665167</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"2025.1.17&#10;pip 연동 편하게 하는 기능 추가&#10;~~이름 이스터에그 추가~~\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737115138054</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737115138054</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"2025.1.17&#10;pip 연동 편하게 하는 기능 추가&#10;~~이름 이스터에그 추가~~\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737115184482</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737115184482</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"2025.1.18&#10;이름 적는거 다 만듬\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737163272506</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737163272506</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"2025.1.18&#10;이름 적는거 다 만듬\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737163355656</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737163355656</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"2025.1.18&#10;생각해보니까 수정해야 하는거 하나 있더라\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737163522639</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737163522639</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"2025.1.18&#10;버그를 바로 발견해버려서 수정함\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737163543294</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737163543294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"2025.1.18&#10;pycharm의 디버그 모드 충돌 방지&#10;그리고, 뭔가 엄청난걸 하기 시작함...\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737193723549</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737193723549</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"2025.1.20&#10;이름 잘못 써놨더라...\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737351877323</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737351877323</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"2025.1.20&#10;1950MapEditor 굉장히 많은 수정 (1950MapEditor_Ver2.py)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1737361240995</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1737361240995</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"16\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"2025.01.12 최초의 커밋\" />\r\n    <MESSAGE value=\"2025.01.13&#10;주석 달기, 코드 최적화&#10;(0112_1.mp4, buildingSystem_test.py, videoPlay.py 제외)\" />\r\n    <MESSAGE value=\"2025.1.16&#10;msgbox.py 프레임 유지 수정&#10;1950MapEditor.py에서 마우스에 있는 타일과 화변 보조 ui에서 나오는 타일이 다른 버그를 수정\" />\r\n    <MESSAGE value=\"2025.1.17&#10;main.py 대거 수정&#10;이름 물어보는 창 만듬&#10;메인 화면에서 맵 볼수 있게 만듬\" />\r\n    <MESSAGE value=\"2025.1.17&#10;이름 선택 창 수정&#10;일어랑 한국어 동시에 안나오는 버그 수정\" />\r\n    <MESSAGE value=\"2025.1.17&#10;pip 연동 편하게 하는 기능 추가&#10;~~이름 이스터에그 추가~~\" />\r\n    <MESSAGE value=\"2025.1.18&#10;이름 적는거 다 만듬\" />\r\n    <MESSAGE value=\"2025.1.18&#10;생각해보니까 수정해야 하는거 하나 있더라\" />\r\n    <MESSAGE value=\"2025.1.18&#10;버그를 바로 발견해버려서 수정함\" />\r\n    <MESSAGE value=\"2025.1.18&#10;pycharm의 디버그 모드 충돌 방지&#10;그리고, 뭔가 엄청난걸 하기 시작함...\" />\r\n    <MESSAGE value=\"2025.1.20&#10;이름 잘못 써놨더라...\" />\r\n    <MESSAGE value=\"2025.1.20&#10;1950MapEditor 굉장히 많은 수정 (1950MapEditor_Ver2.py)\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"2025.1.20&#10;1950MapEditor 굉장히 많은 수정 (1950MapEditor_Ver2.py)\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 135b313e49d64c6e1976046edf06ebb36c820375)
+++ b/.idea/workspace.xml	(date 1737523582598)
@@ -7,12 +7,14 @@
     <option name="rewriteBookmarkType" value="true" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="67dcdbfd-481c-47e8-b6b7-ce60f30bdd14" name="변경" comment="2025.1.20&#10;1950MapEditor 굉장히 많은 수정 (1950MapEditor_Ver2.py)">
-      <change afterPath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/data/img/player/test.png" afterDir="false" />
+    <list default="true" id="67dcdbfd-481c-47e8-b6b7-ce60f30bdd14" name="변경" comment="2025.1.20&#10;다음을 위한 코드 최적화&#10;README.md 수정 (난 도트 못짜요)">
+      <change afterPath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/fullscreen_test.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/1950MapEditor_Ver2.py" beforeDir="false" afterPath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/1950MapEditor_Ver2.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/MAP_Ver2.py" beforeDir="false" afterPath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/codes/MAP_Ver2.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/data/img/player/test.png" beforeDir="false" afterPath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/data/img/player/test.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2/room1.json" beforeDir="false" afterPath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2/room1.json" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/RAGE _ BLOOD FRONTEER/Beta 1.0/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -55,36 +57,37 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python.1950MapEditor.executor": "Run",
-    "Python.1950MapEditor_Ver2.executor": "Run",
-    "Python.InputField.executor": "Run",
-    "Python.KeyEventTkinterToPygame.executor": "Run",
-    "Python.MAP.executor": "Run",
-    "Python.MAP_Ver2.executor": "Run",
-    "Python.TESTFONT.executor": "Run",
-    "Python.asdfasdf_hangul_almost_no_used.executor": "Run",
-    "Python.buildingSystem_test.executor": "Run",
-    "Python.cousor.executor": "Run",
-    "Python.get_name_ui.executor": "Run",
-    "Python.gui.executor": "Run",
-    "Python.hangulInputBox.executor": "Run",
-    "Python.main.executor": "Run",
-    "Python.msgbox.executor": "Run",
-    "Python.popup_prototype.executor": "Run",
-    "Python.pygame_in_tkinter.executor": "Run",
-    "Python.pygame_tkinter_test1.executor": "Run",
-    "Python.pygame_tkiter_test.executor": "Run",
-    "Python.text_editor.executor": "Run",
-    "Python.videoPlay.executor": "Run",
-    "Python.자동 줄바꿈.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "master",
-    "last_opened_file_path": "D:/chris/my_python/rage_blood_fronteer/RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2",
-    "settings.editor.selected.configurable": "inlay.hints"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.1950MapEditor.executor&quot;: &quot;Run&quot;,
+    &quot;Python.1950MapEditor_Ver2.executor&quot;: &quot;Run&quot;,
+    &quot;Python.InputField.executor&quot;: &quot;Run&quot;,
+    &quot;Python.KeyEventTkinterToPygame.executor&quot;: &quot;Run&quot;,
+    &quot;Python.MAP.executor&quot;: &quot;Run&quot;,
+    &quot;Python.MAP_Ver2.executor&quot;: &quot;Run&quot;,
+    &quot;Python.TESTFONT.executor&quot;: &quot;Run&quot;,
+    &quot;Python.asdfasdf_hangul_almost_no_used.executor&quot;: &quot;Run&quot;,
+    &quot;Python.buildingSystem_test.executor&quot;: &quot;Run&quot;,
+    &quot;Python.cousor.executor&quot;: &quot;Run&quot;,
+    &quot;Python.fullscreen_test.executor&quot;: &quot;Run&quot;,
+    &quot;Python.get_name_ui.executor&quot;: &quot;Run&quot;,
+    &quot;Python.gui.executor&quot;: &quot;Run&quot;,
+    &quot;Python.hangulInputBox.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;Python.msgbox.executor&quot;: &quot;Run&quot;,
+    &quot;Python.popup_prototype.executor&quot;: &quot;Run&quot;,
+    &quot;Python.pygame_in_tkinter.executor&quot;: &quot;Run&quot;,
+    &quot;Python.pygame_tkinter_test1.executor&quot;: &quot;Run&quot;,
+    &quot;Python.pygame_tkiter_test.executor&quot;: &quot;Run&quot;,
+    &quot;Python.text_editor.executor&quot;: &quot;Run&quot;,
+    &quot;Python.videoPlay.executor&quot;: &quot;Run&quot;,
+    &quot;Python.자동 줄바꿈.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/chris/my_python/rage_blood_fronteer/RAGE _ BLOOD FRONTEER/Beta 1.0/data/map_Ver2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="D:\chris\my_python\rage_blood_fronteer\RAGE _ BLOOD FRONTEER\Beta 1.0\data\map_Ver2" />
@@ -97,7 +100,7 @@
       <recent name="D:\chris\my_python\rage_blood_fronteer\RAGE _ BLOOD FRONTEER\Beta 1.0\data\video" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.1950MapEditor_Ver2">
+  <component name="RunManager">
     <configuration name="1950MapEditor" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="NEW_rbf" />
       <option name="ENV_FILES" value="" />
@@ -302,7 +305,15 @@
       <option name="project" value="LOCAL" />
       <updated>1737361240995</updated>
     </task>
-    <option name="localTasksCounter" value="16" />
+    <task id="LOCAL-00016" summary="2025.1.20&#10;다음을 위한 코드 최적화&#10;README.md 수정 (난 도트 못짜요)">
+      <option name="closed" value="true" />
+      <created>1737365910338</created>
+      <option name="number" value="00016" />
+      <option name="presentableId" value="LOCAL-00016" />
+      <option name="project" value="LOCAL" />
+      <updated>1737365910338</updated>
+    </task>
+    <option name="localTasksCounter" value="17" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -329,6 +340,7 @@
     <MESSAGE value="2025.1.18&#10;pycharm의 디버그 모드 충돌 방지&#10;그리고, 뭔가 엄청난걸 하기 시작함..." />
     <MESSAGE value="2025.1.20&#10;이름 잘못 써놨더라..." />
     <MESSAGE value="2025.1.20&#10;1950MapEditor 굉장히 많은 수정 (1950MapEditor_Ver2.py)" />
-    <option name="LAST_COMMIT_MESSAGE" value="2025.1.20&#10;1950MapEditor 굉장히 많은 수정 (1950MapEditor_Ver2.py)" />
+    <MESSAGE value="2025.1.20&#10;다음을 위한 코드 최적화&#10;README.md 수정 (난 도트 못짜요)" />
+    <option name="LAST_COMMIT_MESSAGE" value="2025.1.20&#10;다음을 위한 코드 최적화&#10;README.md 수정 (난 도트 못짜요)" />
   </component>
 </project>
\ No newline at end of file
